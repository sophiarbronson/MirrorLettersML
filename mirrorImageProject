{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of 460/595 Project Code","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"m9TmJhMpRtCM"},"source":["Imports that will be used throughout the Notebook."]},{"cell_type":"markdown","metadata":{"id":"VLJV3nflhaFO"},"source":["I have been looking at past assignments and I feel like I am making progress and going towards the right direction. This is what I have so far."]},{"cell_type":"code","metadata":{"id":"8eDQZ76yxVrk","executionInfo":{"status":"ok","timestamp":1605741676962,"user_tz":420,"elapsed":381,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}}},"source":["import os\n","import PIL\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pylab as plt\n","import skimage\n","import keras\n","import tensorflow\n","import shutil\n","from PIL import Image\n","from PIL import ImageOps\n","from skimage import io\n","from random import shuffle\n","from keras import layers\n","from keras import models"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"n-AmcwnER1EJ"},"source":["Versions that are being used."]},{"cell_type":"code","metadata":{"id":"9myCq5hWRYYT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605741678770,"user_tz":420,"elapsed":291,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"5a2943f1-7981-4264-acc4-e346880a0d97"},"source":["print('Pillow Version:', PIL.__version__)\n","print('Skimage Version: ', skimage.__version__)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Pillow Version: 7.0.0\n","Skimage Version:  0.16.2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wHs1BkUGR-Yn"},"source":["Connecting to Google Drive account."]},{"cell_type":"code","metadata":{"id":"6vLy0I9rZ1I-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605741680652,"user_tz":420,"elapsed":320,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"a3707fd4-25ae-4f1d-d7de-eca3f1f74bfa"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"p86QzgjKSis7"},"source":["Gets the data ready for training."]},{"cell_type":"code","metadata":{"id":"xc4gzdajPNh0"},"source":["!ls \"/content/drive/My Drive/460Project/letters/train1\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"N5ZivC1wSQ7y"},"source":["Gets an image and prints the type and shape of the image.\n","Then flips the image and puts it in a new directory."]},{"cell_type":"code","metadata":{"id":"oHxXDr5FaO0W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605684055652,"user_tz":420,"elapsed":1871,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"36c01940-faed-473d-d139-3a5a90c8d082"},"source":["num = 5386\n","#index = 151\n","while num <= 5387:\n","  im = Image.open('/content/drive/My Drive/460Project/set/IMG_{}.PNG'.format(num))\n","  im_mirror = ImageOps.mirror(im)\n","  im_mirror.save('/content/drive/My Drive/460Project/letters/trainx/IMG_{}.png'.format(num), quality=95)\n","  #im.save('/content/drive/My Drive/460Project/letters/train1/{}.png'.format(index), quality=95)\n","  num = num + 1\n","  #index = index + 1\n","\n","print('Done.')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Done.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HWYQ7Vu3bnB4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605585142165,"user_tz":420,"elapsed":1843,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"7ba859ea-758b-42ab-ec70-5a11ae2bff2e"},"source":["im = Image.open('/content/drive/My Drive/460Project/trainz/IMG_4033.png')\n","im_mirror = ImageOps.mirror(im)\n","im_mirror.save('/content/drive/My Drive/460Project/letters/trainx/IMG_4033.png', quality=95)\n","print('Done.')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Done.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-yJt0cFDejEr"},"source":["TRAIN_DIR = '/content/drive/My Drive/460Project/lettes/train1/'\n","#TEST_DIR = '??' # whenever we get the rest of the data fixed\n","IMG_SIZE = 64\n","#LR = 1e-3\n","\n","#MODEL_NAME = "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C7QnxJ1uBuT8"},"source":["num = 1\n","while num <= 172:\n","    img = np.array(Image.open('/content/drive/My Drive/460Project/letters/train1/{}.png'.format(num)))\n","    print(type(img))\n","    print(img.shape)\n","    print(img.size)\n","    print(num)\n","    num = num+1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Bg4fm1z1OIyJ"},"source":["Starts training the data."]},{"cell_type":"code","metadata":{"id":"POtDWtDC3081","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"error","timestamp":1605741694368,"user_tz":420,"elapsed":7139,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"f886e149-2f30-41dc-a440-d78f9c4f5197"},"source":["import shutil, sys\n","\n","# Copy a images to train_a_dir\n","fnames = ['a_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/a/' + fname\n","    shutil.copyfile(src, dst)\n","print('a Done.')\n","\n","# Copy a images to train_b_dir\n","fnames = ['b_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/b/' + fname\n","    shutil.copyfile(src, dst)\n","print('b Done.')\n","\n","# Copy a images to train_c_dir\n","fnames = ['c_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/c/' + fname\n","    shutil.copyfile(src, dst)\n","print('c Done.')\n","\n","# Copy a images to train_d_dir\n","fnames = ['d_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/d/' + fname\n","    shutil.copyfile(src, dst)\n","print('d Done.')\n","\n","# Copy a images to train_e_dir\n","fnames = ['e_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/e/' + fname\n","    shutil.copyfile(src, dst)\n","print('e Done.')\n","\n","# Copy a images to train_f_dir\n","fnames = ['f_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/f/' + fname\n","    shutil.copyfile(src, dst)\n","print('f Done.')\n","\n","# Copy a images to train_g_dir\n","fnames = ['g_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/g/' + fname\n","    shutil.copyfile(src, dst)\n","print('g Done.')\n","\n","# Copy a images to train_h_dir\n","fnames = ['h_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/h/' + fname\n","    shutil.copyfile(src, dst)\n","print('h Done.')\n","\n","# Copy a images to train_i_dir\n","fnames = ['i_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/i/' + fname\n","    shutil.copyfile(src, dst)\n","print('i Done.')\n","\n","# Copy a images to train_j_dir\n","fnames = ['j_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/j/' + fname\n","    shutil.copyfile(src, dst)\n","print('j Done.')\n","\n","# Copy a images to train_k_dir\n","fnames = ['k_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/k/' + fname\n","    shutil.copyfile(src, dst)\n","print('k Done.')\n","\n","# Copy a images to train_l_dir\n","fnames = ['l_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/l/' + fname\n","    shutil.copyfile(src, dst)\n","print('l Done.')\n","\n","# Copy a images to train_m_dir\n","fnames = ['m_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/m/' + fname\n","    shutil.copyfile(src, dst)\n","print('m Done.')\n","\n","# Copy a images to train_n_dir\n","fnames = ['n_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/n/' + fname\n","    shutil.copyfile(src, dst)\n","print('n Done.')\n","\n","# Copy a images to train_o_dir\n","fnames = ['o_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/o/' + fname\n","    shutil.copyfile(src, dst)\n","print('o Done.')\n","\n","# Copy a images to train_p_dir\n","fnames = ['p_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/p/' + fname\n","    shutil.copyfile(src, dst)\n","print('p Done.')\n","\n","# Copy a images to train_q_dir\n","fnames = ['q_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/q/' + fname\n","    shutil.copyfile(src, dst)\n","print('q Done.')\n","\n","# Copy a images to train_r_dir\n","fnames = ['r_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/r/' + fname\n","    shutil.copyfile(src, dst)\n","print('r Done.')\n","\n","# Copy a images to train_s_dir\n","fnames = ['s_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/s/' + fname\n","    shutil.copyfile(src, dst)\n","print('s Done.')\n","\n","# Copy a images to train_t_dir\n","fnames = ['t_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/t/' + fname\n","    shutil.copyfile(src, dst)\n","print('t Done.')\n","\n","# Copy a images to train_u_dir\n","fnames = ['u_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/u/' + fname\n","    shutil.copyfile(src, dst)\n","print('u Done.')\n","\n","# Copy a images to train_v_dir\n","fnames = ['v_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/v/' + fname\n","    shutil.copyfile(src, dst)\n","print('v Done.')\n","\n","# Copy a images to train_w_dir\n","fnames = ['w_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/w/' + fname\n","    shutil.copyfile(src, dst)\n","print('w Done.')\n","\n","# Copy a images to train_x_dir\n","fnames = ['x_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/x/' + fname\n","    shutil.copyfile(src, dst)\n","print('x Done.')\n","\n","# Copy a images to train_y_dir\n","fnames = ['y_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/y/' + fname\n","    shutil.copyfile(src, dst)\n","print('y Done.')\n","\n","# Copy a images to train_z_dir\n","fnames = ['z_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/train/z/' + fname\n","    shutil.copyfile(src, dst)\n","print('z Done.')"],"execution_count":14,"outputs":[{"output_type":"stream","text":["a Done.\n","b Done.\n","c Done.\n"],"name":"stdout"},{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-a8aa74601cdb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     30\u001b[0m     \u001b[0msrc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'/content/drive/My Drive/460Project/letters/train1/'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mfname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0mdst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'/content/drive/My Drive/460Project/letters/train/d/'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mfname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m     \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopyfile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'd Done.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/shutil.py\u001b[0m in \u001b[0;36mcopyfile\u001b[0;34m(src, dst, follow_symlinks)\u001b[0m\n\u001b[1;32m    118\u001b[0m         \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msymlink\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadlink\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 120\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfsrc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    121\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'wb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfdst\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m                 \u001b[0mcopyfileobj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfsrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/My Drive/460Project/letters/train1/d_37.png'"]}]},{"cell_type":"code","metadata":{"id":"NSPra6r53p87"},"source":["import shutil, sys\n","# Directory with our training cat pictures\n","train_b_dir = '/content/drive/My Drive/460Project/letters/train/b/'\n","\n","# Copy a images to train_a_dir\n","fnames = ['b_{}.png'.format(i) for i in range(1,11)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = train_b_dir + fname\n","    shutil.copyfile(src, dst)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CCU-HvSSPgjo"},"source":["import shutil, sys\n","\n","# Copy a images to validate_a_dir\n","fnames = ['a_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/a/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_b_dir\n","fnames = ['b_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/b/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_c_dir\n","fnames = ['c_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/c/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_d_dir\n","fnames = ['d_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/d/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_e_dir\n","fnames = ['e_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/a/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_f_dir\n","fnames = ['f_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/f/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_g_dir\n","fnames = ['g_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/g/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_h_dir\n","fnames = ['h_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/h/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_i_dir\n","fnames = ['i_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/i/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_j_dir\n","fnames = ['j_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/j/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_k_dir\n","fnames = ['k_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/k/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_l_dir\n","fnames = ['l_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/l/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_m_dir\n","fnames = ['m_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/m/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_n_dir\n","fnames = ['n_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/n/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_o_dir\n","fnames = ['o_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/o/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_p_dir\n","fnames = ['p_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/p/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_q_dir\n","fnames = ['q_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/q/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_r_dir\n","fnames = ['r_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/r/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_s_dir\n","fnames = ['s_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/s/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_t_dir\n","fnames = ['t_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/t/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_u_dir\n","fnames = ['u_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/u/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_v_dir\n","fnames = ['v_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/v/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_w_dir\n","fnames = ['w_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/w/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_x_dir\n","fnames = ['x_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/x/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_ay_dir\n","fnames = ['y_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/y/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to validate_z_dir\n","fnames = ['z_{}.png'.format(i) for i in range(1,51)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/validate/z/' + fname\n","    shutil.copyfile(src, dst)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xj-DCnfxTXIC"},"source":["import shutil, sys\n","\n","# Copy a images to train_a_dir\n","fnames = ['a_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/a/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_b_dir\n","fnames = ['b_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/b/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_c_dir\n","fnames = ['c_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/c/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_d_dir\n","fnames = ['d_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/d/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_e_dir\n","fnames = ['e_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/a/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_f_dir\n","fnames = ['f_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/f/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_g_dir\n","fnames = ['g_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/g/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_h_dir\n","fnames = ['h_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/h/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_i_dir\n","fnames = ['i_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/i/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_j_dir\n","fnames = ['j_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/j/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_k_dir\n","fnames = ['k_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/k/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_l_dir\n","fnames = ['l_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/l/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_m_dir\n","fnames = ['m_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/m/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_n_dir\n","fnames = ['n_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/n/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_o_dir\n","fnames = ['o_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/o/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_p_dir\n","fnames = ['p_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/p/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_q_dir\n","fnames = ['q_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/q/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_r_dir\n","fnames = ['r_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/r/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_s_dir\n","fnames = ['s_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/s/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_t_dir\n","fnames = ['t_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/t/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_u_dir\n","fnames = ['u_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/u/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_v_dir\n","fnames = ['v_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/v/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_w_dir\n","fnames = ['w_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/w/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to train_x_dir\n","fnames = ['x_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/x/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to test_y_dir\n","fnames = ['y_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/y/' + fname\n","    shutil.copyfile(src, dst)\n","\n","# Copy a images to test_z_dir\n","fnames = ['z_{}.png'.format(i) for i in range(1,21)]\n","for fname in fnames:\n","    src = '/content/drive/My Drive/460Project/letters/train1/' + fname\n","    dst = '/content/drive/My Drive/460Project/letters/test/z/' + fname\n","    shutil.copyfile(src, dst)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"O0LWWQGENik0"},"source":["from keras import layers\n","from keras import models\n","\n","model = models.Sequential()\n","model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Flatten())\n","model.add(layers.Dense(512, activation='relu'))\n","model.add(layers.Dense(1, activation='sigmoid'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4bLxk07PNugf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605568433833,"user_tz":420,"elapsed":419,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"f2dab14d-23b2-4aa2-d90c-f5f090e1d44b"},"source":["model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (None, 148, 148, 32)      896       \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 74, 74, 32)        0         \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 72, 72, 64)        18496     \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 36, 36, 64)        0         \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (None, 34, 34, 128)       73856     \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 17, 17, 128)       0         \n","_________________________________________________________________\n","conv2d_3 (Conv2D)            (None, 15, 15, 128)       147584    \n","_________________________________________________________________\n","max_pooling2d_3 (MaxPooling2 (None, 7, 7, 128)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 6272)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 512)               3211776   \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 513       \n","=================================================================\n","Total params: 3,453,121\n","Trainable params: 3,453,121\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9OhBXYSuNy6n"},"source":["from keras import optimizers\n","\n","model.compile(loss='binary_crossentropy',\n","              optimizer=optimizers.RMSprop(lr=1e-4),\n","              metrics=['acc'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7u3lO2rCOTgP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605568442267,"user_tz":420,"elapsed":720,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"b676ff99-edd8-4d79-93cd-85a21fd1d749"},"source":["from keras.preprocessing.image import ImageDataGenerator\n","\n","train_dir = '/content/drive/My Drive/460Project/letters/train/'\n","validation_dir = '/content/drive/My Drive/460Project/letters/validate/'\n","\n","# All images will be rescaled by 1./255\n","train_datagen = ImageDataGenerator(rescale=1./255)\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","train_generator = train_datagen.flow_from_directory(\n","        # This is the target directory\n","        train_dir,\n","        # All images will be resized to 150x150\n","        target_size=(150, 150),\n","        batch_size=20,\n","        # Since we use binary_crossentropy loss, we need binary labels\n","        class_mode='categorical')\n","\n","validation_generator = test_datagen.flow_from_directory(\n","        validation_dir,\n","        target_size=(150, 150),\n","        batch_size=20,\n","        class_mode='categorical')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found 511 images belonging to 26 classes.\n","Found 520 images belonging to 28 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"U1zLlBuhObwk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605568458225,"user_tz":420,"elapsed":2777,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"d62243e1-46fd-4fe3-afe7-111e8bb0b0da"},"source":["for data_batch, labels_batch in train_generator:\n","    print('data batch shape:', data_batch.shape)\n","    print('labels batch shape:', labels_batch.shape)\n","    break"],"execution_count":null,"outputs":[{"output_type":"stream","text":["data batch shape: (20, 150, 150, 3)\n","labels batch shape: (20, 26)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ecFxkLTqOepa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605569229378,"user_tz":420,"elapsed":628903,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"56b451ac-3cfb-4ee0-8e3a-b4106ef6318f"},"source":["history = model.fit_generator(\n","      train_generator,\n","      steps_per_epoch=20,\n","      epochs=10,\n","      validation_data=validation_generator,\n","      validation_steps=50)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","20/20 [==============================] - ETA: 0s - loss: 0.1667 - acc: 0.9615WARNING:tensorflow:Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches (in this case, 50 batches). You may need to use the repeat() function when building your dataset.\n","20/20 [==============================] - 112s 6s/step - loss: 0.1667 - acc: 0.9615 - val_loss: 0.1602 - val_acc: 0.9643\n","Epoch 2/10\n","20/20 [==============================] - 53s 3s/step - loss: 0.1663 - acc: 0.9615\n","Epoch 3/10\n","20/20 [==============================] - 52s 3s/step - loss: 0.1666 - acc: 0.9615\n","Epoch 4/10\n","20/20 [==============================] - 52s 3s/step - loss: 0.1661 - acc: 0.9615\n","Epoch 5/10\n","20/20 [==============================] - 51s 3s/step - loss: 0.1655 - acc: 0.9615\n","Epoch 6/10\n","20/20 [==============================] - 51s 3s/step - loss: 0.1660 - acc: 0.9615\n","Epoch 7/10\n","20/20 [==============================] - 53s 3s/step - loss: 0.1658 - acc: 0.9615\n","Epoch 8/10\n","20/20 [==============================] - 52s 3s/step - loss: 0.1652 - acc: 0.9615\n","Epoch 9/10\n","20/20 [==============================] - 52s 3s/step - loss: 0.1658 - acc: 0.9615\n","Epoch 10/10\n","20/20 [==============================] - 52s 3s/step - loss: 0.1656 - acc: 0.9615\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"c6OVS5VFOplw","colab":{"base_uri":"https://localhost:8080/","height":627},"executionInfo":{"status":"error","timestamp":1605569255116,"user_tz":420,"elapsed":530,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"71f3604a-95f9-431d-b352-856c8490e093"},"source":["import matplotlib.pyplot as plt\n","\n","acc = history.history['acc']\n","val_acc = history.history['val_acc']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(len(acc))\n","\n","plt.plot(epochs, acc, 'bo', label='Training acc')\n","plt.plot(epochs, val_acc, 'b', label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","\n","plt.figure()\n","\n","plt.plot(epochs, loss, 'bo', label='Training loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-74-ce9171dbf527>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0macc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'bo'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Training acc'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_acc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Validation acc'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Training and validation accuracy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2761\u001b[0m     return gca().plot(\n\u001b[1;32m   2762\u001b[0m         *args, scalex=scalex, scaley=scaley, **({\"data\": data} if data\n\u001b[0;32m-> 2763\u001b[0;31m         is not None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2764\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1645\u001b[0m         \"\"\"\n\u001b[1;32m   1646\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1647\u001b[0;31m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1648\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlines\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1649\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m                 \u001b[0mthis\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m             \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_plot_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_next_color\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_plot_args\u001b[0;34m(self, tup, kwargs)\u001b[0m\n\u001b[1;32m    340\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m             raise ValueError(f\"x and y must have same first dimension, but \"\n\u001b[0m\u001b[1;32m    343\u001b[0m                              f\"have shapes {x.shape} and {y.shape}\")\n\u001b[1;32m    344\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: x and y must have same first dimension, but have shapes (10,) and (1,)"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"TwAONxPMOuzM"},"source":["datagen = ImageDataGenerator(\n","      rotation_range=40,\n","      width_shift_range=0.2,\n","      height_shift_range=0.2,\n","      shear_range=0.2,\n","      zoom_range=0.2,\n","      horizontal_flip=True,\n","      fill_mode='nearest')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"R4P15y3tOy55","colab":{"base_uri":"https://localhost:8080/","height":396},"executionInfo":{"status":"error","timestamp":1605569655498,"user_tz":420,"elapsed":449,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"54a9babf-37a7-437e-96d0-5cdb189e276a"},"source":["# This is module with image preprocessing utilities\n","from keras.preprocessing import image\n","import os\n","\n","fnames = [('content/drive/My Drive/460Project/letters/train/a/', fname) for fname in 'content/drive/My Drive/460Project/letters/train/a/']\n","\n","# We pick one image to \"augment\"\n","img_path = fnames[27]\n","\n","# Read the image and resize it\n","img = image.load_img(img_path, target_size=(150, 150))\n","\n","# Convert it to a Numpy array with shape (150, 150, 3)\n","x = image.img_to_array(img)\n","\n","# Reshape it to (1, 150, 150, 3)\n","x = x.reshape((1,) + x.shape)\n","\n","# The .flow() command below generates batches of randomly transformed images.\n","# It will loop indefinitely, so we need to `break` the loop at some point!\n","i = 0\n","for batch in datagen.flow(x, batch_size=1):\n","    plt.figure(i)\n","    imgplot = plt.imshow(image.array_to_img(batch[0]))\n","    i += 1\n","    if i % 4 == 0:\n","        break\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-85-9e956ede04d2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Read the image and resize it\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_img\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m150\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m150\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Convert it to a Numpy array with shape (150, 150, 3)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/preprocessing/image.py\u001b[0m in \u001b[0;36mload_img\u001b[0;34m(path, grayscale, color_mode, target_size, interpolation)\u001b[0m\n\u001b[1;32m    299\u001b[0m   \"\"\"\n\u001b[1;32m    300\u001b[0m   return image.load_img(path, grayscale=grayscale, color_mode=color_mode,\n\u001b[0;32m--> 301\u001b[0;31m                         target_size=target_size, interpolation=interpolation)\n\u001b[0m\u001b[1;32m    302\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    303\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras_preprocessing/image/utils.py\u001b[0m in \u001b[0;36mload_img\u001b[0;34m(path, grayscale, color_mode, target_size, interpolation)\u001b[0m\n\u001b[1;32m    111\u001b[0m         raise ImportError('Could not import PIL.Image. '\n\u001b[1;32m    112\u001b[0m                           'The use of `load_img` requires PIL.')\n\u001b[0;32m--> 113\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m         \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpil_image\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcolor_mode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'grayscale'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: expected str, bytes or os.PathLike object, not tuple"]}]},{"cell_type":"code","metadata":{"id":"NjXYWZKDPEwe"},"source":["model = models.Sequential()\n","model.add(layers.Conv2D(32, (3, 3), activation='relu',\n","                        input_shape=(150, 150, 3)))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Flatten())\n","model.add(layers.Dropout(0.5))\n","model.add(layers.Dense(512, activation='relu'))\n","model.add(layers.Dense(1, activation='sigmoid'))\n","\n","model.compile(loss='binary_crossentropy',\n","              optimizer=optimizers.RMSprop(lr=1e-4),\n","              metrics=['acc'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"txMyHjwE2-ak","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605569877677,"user_tz":420,"elapsed":139938,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"c90c4ea4-b262-48a4-f5a9-aeb7baf9ad20"},"source":["train_datagen = ImageDataGenerator(\n","    rescale=1./255,\n","    rotation_range=40,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    shear_range=0.2,\n","    zoom_range=0.2,\n","    horizontal_flip=True,)\n","\n","# Note that the validation data should not be augmented!\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","train_generator = train_datagen.flow_from_directory(\n","        # This is the target directory\n","        train_dir,\n","        # All images will be resized to 150x150\n","        target_size=(150, 150),\n","        batch_size=32,\n","        # Since we use binary_crossentropy loss, we need binary labels\n","        class_mode='binary')\n","\n","validation_generator = test_datagen.flow_from_directory(\n","        validation_dir,\n","        target_size=(150, 150),\n","        batch_size=32,\n","        class_mode='binary')\n","\n","history = model.fit_generator(\n","      train_generator,\n","      steps_per_epoch=20,\n","      epochs=100,\n","      validation_data=validation_generator,\n","      validation_steps=50)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found 511 images belonging to 26 classes.\n","Found 520 images belonging to 28 classes.\n","Epoch 1/100\n","16/20 [=======================>......] - ETA: 16s - loss: -690.9694 - acc: 0.0391WARNING:tensorflow:Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches (in this case, 2000 batches). You may need to use the repeat() function when building your dataset.\n","WARNING:tensorflow:Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches (in this case, 50 batches). You may need to use the repeat() function when building your dataset.\n","16/20 [=======================>......] - 130s 8s/step - loss: -690.9694 - acc: 0.0391 - val_loss: -3591.0417 - val_acc: 0.0385\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zw4Tq5aQ3QpH"},"source":["model.save('train1.h5')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"z09y3ZcOPO3Z","colab":{"base_uri":"https://localhost:8080/","height":545},"executionInfo":{"status":"ok","timestamp":1605570082932,"user_tz":420,"elapsed":843,"user":{"displayName":"Sophia Bronson","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvalkR5blIu8r-_DkfWHqUyBadrsrCdxNvt4CiKw=s64","userId":"10530334791637775493"}},"outputId":"6c420efa-7c73-432c-ea57-e7abb8efaa4f"},"source":["acc = history.history['acc']\n","val_acc = history.history['val_acc']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(len(acc))\n","\n","plt.plot(epochs, acc, 'bo', label='Training acc')\n","plt.plot(epochs, val_acc, 'b', label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","\n","plt.figure()\n","\n","plt.plot(epochs, loss, 'bo', label='Training loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}